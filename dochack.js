/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI37032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI180074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI41262 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI182526 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71442 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71438 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71434 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71430 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71426 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71422 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71418 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71414 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71410 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71406 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71402 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71398 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71394 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71390 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71386 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71382 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71378 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71374 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71370 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71366 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71275 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI71221 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI71520 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71518 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71516 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71225 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71223 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI73045 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI41250 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41258 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI37006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI53541 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI41208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41314 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI37016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI37040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI37042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI41308 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI41226 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41242 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41246 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI41246 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41246.node = NNI41246;
var NNI41242 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41242.node = NNI41242;
var NNI41228 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41228.node = NNI41228;
NTI41308.base = NTI41226;
NTI41314.base = NTI41226;
var NNI41226 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI41308, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI37042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI37040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI37040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI37016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI41314, name: "up", sons: null}]};
NTI41226.node = NNI41226;
var NNI41208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41208.node = NNI41208;
NTI41226.base = NTI41208;
NTI41228.base = NTI41226;
NTI41242.base = NTI41228;
NTI41246.base = NTI41242;
var NNI53541 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI37042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI37006, name: "Field1", sons: null}]};
NTI53541.node = NNI53541;
var NNI41258 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41258.node = NNI41258;
NTI41258.base = NTI41228;
var NNI41250 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41250.node = NNI41250;
NTI41250.base = NTI41228;
NTI71516.base = NTI71223;
NTI71518.base = NTI71223;
NTI71520.base = NTI71223;
var NNI71221 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI71221, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI71221, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI71221, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI71221, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI71221, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI71221, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI71221, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI71221, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI71221, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI71221, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI71221, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI71221, name: "NotationNode", len: 0, sons: null}}};
NTI71221.node = NNI71221;
var NNI71277 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI37042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI37042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI37042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI37042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI37042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI37042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI37042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI37042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI37042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI37042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI37042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI37042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI37042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI37042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI37042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI37042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI37042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI37042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI37042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI37042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI37042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI37042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI37042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI37042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI37042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI37042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI37042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI37042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI37042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI37042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI37042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI37042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI37042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI37042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI37042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI37042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI37042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI37042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI37042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI37042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI37042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI37042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI37042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI37042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI37042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI37042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI37042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI37042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI37042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI37042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI37042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI37042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI37042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI37042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI37042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI37042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI37042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI37042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI37042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI37042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI37042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI37042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI37042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI37042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI37042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI37042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI37042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI37042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI37042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI37042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI37042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI37042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI37042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI37042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI37042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI37042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI37042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI37042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI37042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI37042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI37042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI37042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI37042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI37042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI37042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI37042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI37042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI37042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI37042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI37042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI37006, name: "zIndex", sons: null}]};
NTI71277.node = NNI71277;
NTI71277.base = NTI41208;
NTI71275.base = NTI71277;
var NNI71225 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI71516, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI71518, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI71520, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI37042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI71223, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI71223, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI71223, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI37042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI71221, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI37042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI71223, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI71223, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI37042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI71275, name: "style", sons: null}]};
NTI71225.node = NNI71225;
var NNI71205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI71366, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI71370, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI71374, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI71378, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI71382, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI71386, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI71390, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI71394, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI71398, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI71402, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI71406, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI71410, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI71414, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI71418, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI71422, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI71426, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI71430, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI71434, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI71438, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI71442, name: "onunload", sons: null}]};
NTI71205.node = NNI71205;
NTI71205.base = NTI41208;
NTI71225.base = NTI71205;
NTI71223.base = NTI71225;
NTI73045.base = NTI71223;
NTI182526.base = NTI37042;
var NNI41262 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI41262.node = NNI41262;
NTI41262.base = NTI41228;
var NNI180074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI37006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI37032, name: "Field1", sons: null}]};
NTI180074.node = NNI180074;

function makeNimstrLit(c_54391) {
		  var ln = c_54391.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_54391.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_55427, src_55428, ti_55429) {
	var result_55619 = null;

		switch (ti_55429.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_55401(ti_55429))) {
			result_55619 = src_55428;
			}
			else {
				result_55619 = [src_55428[0], src_55428[1]];
			}
			
			break;
		case 19:
			      if (dest_55427 === null || dest_55427 === undefined) {
        dest_55427 = {};
      }
      else {
        for (var key in dest_55427) { delete dest_55427[key]; }
      }
      for (var key in src_55428) { dest_55427[key] = src_55428[key]; }
      result_55619 = dest_55427;
    
			break;
		case 18:
		case 17:
			if (!((ti_55429.base == null))) {
			result_55619 = nimCopy(dest_55427, src_55428, ti_55429.base);
			}
			else {
			if ((ti_55429.kind == 17)) {
			result_55619 = (dest_55427 === null || dest_55427 === undefined) ? {m_type: ti_55429} : dest_55427;
			}
			else {
				result_55619 = (dest_55427 === null || dest_55427 === undefined) ? {} : dest_55427;
			}
			}
			nimCopyAux(result_55619, src_55428, ti_55429.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_55428 === null) {
        result_55619 = null;
      }
      else {
        if (dest_55427 === null || dest_55427 === undefined) {
          dest_55427 = new Array(src_55428.length);
        }
        else {
          dest_55427.length = src_55428.length;
        }
        result_55619 = dest_55427;
        for (var i = 0; i < src_55428.length; ++i) {
          result_55619[i] = nimCopy(result_55619[i], src_55428[i], ti_55429.base);
        }
      }
    
			break;
		case 28:
			      if (src_55428 !== null) {
        result_55619 = src_55428.slice(0);
      }
    
			break;
		default: 
			result_55619 = src_55428;
			break;
		}

	return result_55619;

}

function arrayConstr(len_55671, value_55672, typ_55673) {
		    var result = new Array(len_55671);
    for (var i = 0; i < len_55671; ++i) result[i] = nimCopy(null, value_55672, typ_55673);
    return result;
  

	
}

function cstrToNimstr(c_54408) {
		  var ln = c_54408.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_54408.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_54408.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_54425) {
		  if (s_54425 === null) return "";
  var len = s_54425.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_54425[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_54425[i] < 128)
      asciiPart[i] = fcc(s_54425[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_54018, ename_54019) {
		e_54018.name = ename_54019;
		if ((excHandler == 0)) {
		unhandledException(e_54018);
		}
		
		e_54018.trace = nimCopy(null, raw_write_stack_trace_53838(), NTI37040);
		throw e_54018;

	
}

function addInt(a_54803, b_54804) {
		    var result = a_54803 + b_54804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_55690, a_55691, b_55692) {
			var Tmp1;

	var result_55693 = 0;

	BeforeRet: do {
			if (!(a_55691 <= i_55690)) Tmp1 = false; else {				Tmp1 = (i_55690 <= b_55692);			}		if (Tmp1) {
		result_55693 = i_55690;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_55693;

}

function subInt(a_54821, b_54822) {
		    var result = a_54821 - b_54822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_55709, a_55710, b_55711) {
			var Tmp1;

	var result_55712 = 0;

	BeforeRet: do {
			if (!(a_55710 <= i_55709)) Tmp1 = false; else {				Tmp1 = (i_55709 <= b_55711);			}		if (Tmp1) {
		result_55712 = i_55709;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_55712;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_54839, b_54840) {
		    var result = a_54839 * b_54840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_55158, b_55159) {
		var Tmp1;

	var result_55160 = 0;

	BeforeRet: do {
		if ((b_55159 <= a_55158)) {
		Tmp1 = a_55158;
		}
		else {
		Tmp1 = b_55159;
		}
		
		result_55160 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_55160;

}

function nimMin(a_55140, b_55141) {
		var Tmp1;

	var result_55142 = 0;

	BeforeRet: do {
		if ((a_55140 <= b_55141)) {
		Tmp1 = a_55140;
		}
		else {
		Tmp1 = b_55141;
		}
		
		result_55142 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_55142;

}
var nim_program_result = 0;
var global_raise_hook_51418 = [null];
var local_raise_hook_51423 = [null];
var out_of_mem_hook_51426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_182285 = [null];

function is_fat_pointer_55401(ti_55403) {
	var result_55404 = false;

	BeforeRet: do {
		result_55404 = !((ConstSet1[ti_55403.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_55404;

}

function nimCopyAux(dest_55432, src_55433, n_55435) {
		switch (n_55435.kind) {
		case 0:
			break;
		case 1:
			      dest_55432[n_55435.offset] = nimCopy(dest_55432[n_55435.offset], src_55433[n_55435.offset], n_55435.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_55435.sons.length; i++) {
      nimCopyAux(dest_55432, src_55433, n_55435.sons[i]);
    }
    
			break;
		case 3:
			      dest_55432[n_55435.offset] = nimCopy(dest_55432[n_55435.offset], src_55433[n_55435.offset], n_55435.typ);
      for (var i = 0; i < n_55435.sons.length; ++i) {
        nimCopyAux(dest_55432, src_55433, n_55435.sons[i][1]);
      }
    
			break;
		}

	
}

function add_51438(x_51441, x_51441_Idx, y_51442) {
		      if (x_51441[x_51441_Idx] === null) { x_51441[x_51441_Idx] = []; }
      var off = x_51441[x_51441_Idx].length;
      x_51441[x_51441_Idx].length += y_51442.length;
      for (var i = 0; i < y_51442.length; ++i) {
        x_51441[x_51441_Idx][off+i] = y_51442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_53536(f_53538) {
					var Tmp3;

	var result_53539 = [null];

		var it_53547 = f_53538;
		var i_53549 = 0;
		var total_53551 = 0;
		var temp_frames_53558 = arrayConstr(64, {Field0: null, Field1: 0}, NTI53541);
		L1: do {
				L2: while (true) {
					if (!!((it_53547 == null))) Tmp3 = false; else {						Tmp3 = (i_53549 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_53558[i_53549].Field0 = it_53547.procname;
					temp_frames_53558[i_53549].Field1 = it_53547.line;
					i_53549 += 1;
					total_53551 += 1;
					it_53547 = it_53547.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_53547 == null))) break L5;
					total_53551 += 1;
					it_53547 = it_53547.prev;
				}
		} while(false);
		result_53539[0] = nimCopy(null, [], NTI37040);
		if (!((total_53551 == i_53549))) {
		if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(makeNimstrLit("(")); } else { result_53539[0] = makeNimstrLit("("); };
		if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(cstrToNimstr(((total_53551 - i_53549))+"")); } else { result_53539[0] = cstrToNimstr(((total_53551 - i_53549))+"").slice(); };
		if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_53539[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_53821 = 0;
			var colontmp__182426 = 0;
			colontmp__182426 = (i_53549 - 1);
			var res_182431 = colontmp__182426;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_182431)) break L8;
						j_53821 = res_182431;
						add_51438(result_53539, 0, temp_frames_53558[j_53821].Field0);
						if ((0 < temp_frames_53558[j_53821].Field1)) {
						if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(makeNimstrLit(", line: ")); } else { result_53539[0] = makeNimstrLit(", line: "); };
						if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(cstrToNimstr((temp_frames_53558[j_53821].Field1)+"")); } else { result_53539[0] = cstrToNimstr((temp_frames_53558[j_53821].Field1)+"").slice(); };
						}
						
						if (result_53539[0] != null) { result_53539[0] = (result_53539[0]).concat(makeNimstrLit("\x0A")); } else { result_53539[0] = makeNimstrLit("\x0A"); };
						res_182431 -= 1;
					}
			} while(false);
		} while(false);

	return result_53539[0];

}

function raw_write_stack_trace_53838() {
	var result_53840 = null;

		if (!((framePtr == null))) {
		result_53840 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_53536(framePtr) || []), NTI37040);
		}
		else {
			result_53840 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI37040);
		}
		

	return result_53840;

}

function unhandledException(e_53899) {
		var buf_53900 = [[]];
		if (!(((e_53899.message != null ? e_53899.message.length : 0) == 0))) {
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_53900[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(e_53899.message); } else { buf_53900[0] = e_53899.message.slice(); };
		}
		else {
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_53900[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(makeNimstrLit(" [")); } else { buf_53900[0] = makeNimstrLit(" ["); };
		add_51438(buf_53900, 0, e_53899.name);
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(makeNimstrLit("]\x0A")); } else { buf_53900[0] = makeNimstrLit("]\x0A"); };
		if (buf_53900[0] != null) { buf_53900[0] = (buf_53900[0]).concat(raw_write_stack_trace_53838()); } else { buf_53900[0] = raw_write_stack_trace_53838().slice(); };
		var cbuf_54001 = toJSStr(buf_53900[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_54001);
  }
  else {
    throw cbuf_54001;
  }
  

	
}

function raiseOverflow() {
		var e_54252 = null;
		e_54252 = {m_type: NTI41246, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_54252.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI37040);
		e_54252.parent = null;
		raiseException(e_54252, "OverflowError");

	
}

function is_whitespace_181639(text_181641) {
		     return !/[^\s]/.test(text_181641);
  

	
}

function is_whitespace_181656(x_181658) {
		var Tmp1;
		var Tmp2;

	var result_181659 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_181658.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_181639(x_181658.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_181658.nodeName == "#comment");		}		result_181659 = Tmp1;
	framePtr = F.prev;

	return result_181659;

}

function raiseIndexError() {
		var e_54327 = null;
		e_54327 = {m_type: NTI41258, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_54327.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI37040);
		e_54327.parent = null;
		raiseException(e_54327, "IndexError");

	
}

function to_toc_181673(x_181675, father_181676) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_181675.nodeName == "UL")) {
		F.line = 139;
		var f_181695 = {heading: null, kids: [], sortId: (father_181676.kids != null ? father_181676.kids.length : 0), doSort: false};
		F.line = 140;
		var i_181697 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_181697 < x_181675.childNodes.length)) break L2;
					F.line = 142;
					var nxt_181698 = addInt(i_181697, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_181698 < x_181675.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_181656(x_181675.childNodes[nxt_181698]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_181698 = addInt(nxt_181698, 1);
							}
					} while(false);
						if (!(nxt_181698 < x_181675.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_181675.childNodes[i_181697].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_181675.childNodes[i_181697].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_181675.childNodes[nxt_181698].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_181723 = {heading: x_181675.childNodes[i_181697].childNodes[0], kids: [], sortId: (f_181695.kids != null ? f_181695.kids.length : 0), doSort: false};
					F.line = 148;
					var it_181724 = x_181675.childNodes[nxt_181698];
					L9: do {
						F.line = 149;
						var j_181731 = 0;
						F.line = 3055;
						var colontmp__182402 = 0;
						F.line = 149;
						colontmp__182402 = it_181724.childNodes.length;
						F.line = 3056;
						var i_182403 = 0;
						L10: do {
							F.line = 3057;
								L11: while (true) {
								if (!(i_182403 < colontmp__182402)) break L11;
									F.line = 149;
									j_181731 = i_182403;
									F.line = 150;
									to_toc_181673(it_181724.childNodes[j_181731], e_181723);
									F.line = 3059;
									i_182403 = addInt(i_182403, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_181695.kids != null) { f_181695.kids.push(e_181723); } else { f_181695.kids = [e_181723]; };
					F.line = 152;
					i_181697 = addInt(nxt_181698, 1);
					}
					else {
						F.line = 154;
						to_toc_181673(x_181675.childNodes[i_181697], f_181695);
						F.line = 155;
						i_181697 = addInt(i_181697, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_181676.kids != null) { father_181676.kids.push(f_181695); } else { father_181676.kids = [f_181695]; };
		}
		else {
		if (is_whitespace_181656(x_181675)) {
		}
		else {
		if ((x_181675.nodeName == "LI")) {
		F.line = 160;
		var idx_181766 = [];
		L12: do {
			F.line = 161;
			var i_181773 = 0;
			F.line = 3055;
			var colontmp__182407 = 0;
			F.line = 161;
			colontmp__182407 = x_181675.childNodes.length;
			F.line = 3056;
			var i_182408 = 0;
			L13: do {
				F.line = 3057;
					L14: while (true) {
					if (!(i_182408 < colontmp__182407)) break L14;
						F.line = 161;
						i_181773 = i_182408;
						if (!(is_whitespace_181656(x_181675.childNodes[i_181773]))) {
						F.line = 162;
						if (idx_181766 != null) { idx_181766.push(i_181773); } else { idx_181766 = [i_181773]; };
						}
						
						F.line = 3059;
						i_182408 = addInt(i_182408, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_181766 != null ? idx_181766.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_181675.childNodes[idx_181766[chckIndx(1, 0, idx_181766.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_181804 = {heading: x_181675.childNodes[idx_181766[chckIndx(0, 0, idx_181766.length+0-1)-0]], kids: [], sortId: (father_181676.kids != null ? father_181676.kids.length : 0), doSort: false};
		F.line = 166;
		var it_181805 = x_181675.childNodes[idx_181766[chckIndx(1, 0, idx_181766.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_181812 = 0;
			F.line = 3055;
			var colontmp__182413 = 0;
			F.line = 167;
			colontmp__182413 = it_181805.childNodes.length;
			F.line = 3056;
			var i_182414 = 0;
			L17: do {
				F.line = 3057;
					L18: while (true) {
					if (!(i_182414 < colontmp__182413)) break L18;
						F.line = 167;
						j_181812 = i_182414;
						F.line = 168;
						to_toc_181673(it_181805.childNodes[j_181812], e_181804);
						F.line = 3059;
						i_182414 = addInt(i_182414, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_181676.kids != null) { father_181676.kids.push(e_181804); } else { father_181676.kids = [e_181804]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_181826 = 0;
				F.line = 3055;
				var colontmp__182418 = 0;
				F.line = 171;
				colontmp__182418 = x_181675.childNodes.length;
				F.line = 3056;
				var i_182419 = 0;
				L20: do {
					F.line = 3057;
						L21: while (true) {
						if (!(i_182419 < colontmp__182418)) break L21;
							F.line = 171;
							i_181826 = i_182419;
							F.line = 172;
							to_toc_181673(x_181675.childNodes[i_181826], father_181676);
							F.line = 3059;
							i_182419 = addInt(i_182419, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_181676.kids != null) { father_181676.kids.push({heading: x_181675, kids: [], sortId: (father_181676.kids != null ? father_181676.kids.length : 0), doSort: false}); } else { father_181676.kids = [{heading: x_181675, kids: [], sortId: (father_181676.kids != null ? father_181676.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_181307(x_181309, heading_181310, items_181313, items_181313_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_181309 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_181309.heading == null))) Tmp1 = false; else {				Tmp1 = (x_181309.heading.textContent == heading_181310);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_181341 = 0;
			F.line = 3055;
			var colontmp__182437 = 0;
			F.line = 83;
			colontmp__182437 = (x_181309.kids != null ? x_181309.kids.length : 0);
			F.line = 3056;
			var i_182438 = 0;
			L3: do {
				F.line = 3057;
					L4: while (true) {
					if (!(i_182438 < colontmp__182437)) break L4;
						F.line = 83;
						i_181341 = i_182438;
						F.line = 84;
						if (items_181313[items_181313_Idx] != null) { items_181313[items_181313_Idx].push(x_181309.kids[chckIndx(i_181341, 0, x_181309.kids.length+0-1)-0].heading); } else { items_181313[items_181313_Idx] = [x_181309.kids[chckIndx(i_181341, 0, x_181309.kids.length+0-1)-0].heading]; };
						F.line = 3059;
						i_182438 = addInt(i_182438, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_181360 = 0;
				F.line = 3055;
				var colontmp__182442 = 0;
				F.line = 86;
				colontmp__182442 = (x_181309.kids != null ? x_181309.kids.length : 0);
				F.line = 3056;
				var i_182443 = 0;
				L6: do {
					F.line = 3057;
						L7: while (true) {
						if (!(i_182443 < colontmp__182442)) break L7;
							F.line = 86;
							i_181360 = i_182443;
							F.line = 87;
							var it_181361 = x_181309.kids[chckIndx(i_181360, 0, x_181309.kids.length+0-1)-0];
							F.line = 88;
							extract_items_181307(it_181361, heading_181310, items_181313, items_181313_Idx);
							F.line = 3059;
							i_182443 = addInt(i_182443, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_181020(tag_181022, kids_181024) {
	var result_181025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_181025 = document.createElement(toJSStr(tag_181022));
		L1: do {
			F.line = 12;
			var k_181056 = null;
			F.line = 2309;
			var i_182460 = 0;
			L2: do {
				F.line = 2310;
					L3: while (true) {
					if (!(i_182460 < (kids_181024 != null ? kids_181024.length : 0))) break L3;
						F.line = 12;
						k_181056 = kids_181024[chckIndx(i_182460, 0, kids_181024.length+0-1)-0];
						F.line = 13;
						result_181025.appendChild(k_181056);
						F.line = 2312;
						i_182460 = addInt(i_182460, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_181025;

}

function text_181122(s_181124) {
	var result_181125 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_181125 = document.createTextNode(s_181124);
	framePtr = F.prev;

	return result_181125;

}

function sys_fatal_58236(message_58240) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"..\\..\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3015;
		var e_58242 = null;
		F.line = 3016;
		e_58242 = {m_type: NTI41250, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 3017;
		e_58242.message = nimCopy(null, message_58240, NTI37040);
		F.line = 3018;
		raiseException(e_58242, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_58232(msg_58234) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"..\\..\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3734;
		sys_fatal_58236(msg_58234);
	framePtr = F.prev;

	
}

function failed_assert_impl_58275(msg_58277) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"..\\..\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3741;
		raise_assert_58232(msg_58277);
	framePtr = F.prev;

	
}

function uncovered_181920(x_181922) {
			var Tmp1;
		var Tmp2;

	var result_181923 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_181922.kids != null ? x_181922.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_181922.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_181922.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_181922;
		}
		else {
		Tmp2 = null;
		}
		
		result_181923 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_181923 = {heading: x_181922.heading, kids: [], sortId: x_181922.sortId, doSort: x_181922.doSort};
		L3: do {
			F.line = 197;
			var i_181961 = 0;
			F.line = 3055;
			var colontmp__182472 = 0;
			F.line = 197;
			colontmp__182472 = (x_181922.kids != null ? x_181922.kids.length : 0);
			F.line = 3056;
			var i_182473 = 0;
			L4: do {
				F.line = 3057;
					L5: while (true) {
					if (!(i_182473 < colontmp__182472)) break L5;
						F.line = 197;
						i_181961 = i_182473;
						F.line = 198;
						var y_181962 = uncovered_181920(x_181922.kids[chckIndx(i_181961, 0, x_181922.kids.length+0-1)-0]);
						if (!((y_181962 == null))) {
						F.line = 199;
						if (result_181923.kids != null) { result_181923.kids.push(y_181962); } else { result_181923.kids = [y_181962]; };
						}
						
						F.line = 3059;
						i_182473 = addInt(i_182473, 1);
					}
			} while(false);
		} while(false);
		if (((result_181923.kids != null ? result_181923.kids.length : 0) == 0)) {
		F.line = 200;
		result_181923 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_181923;

}

function merge_tocs_181996(orig_181998, news_181999) {
	var result_182000 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_182000 = uncovered_181920(orig_181998);
		if ((result_182000 == null)) {
		F.line = 205;
		result_182000 = news_181999;
		}
		else {
			L1: do {
				F.line = 207;
				var i_182020 = 0;
				F.line = 3055;
				var colontmp__182466 = 0;
				F.line = 207;
				colontmp__182466 = (news_181999.kids != null ? news_181999.kids.length : 0);
				F.line = 3056;
				var i_182467 = 0;
				L2: do {
					F.line = 3057;
						L3: while (true) {
						if (!(i_182467 < colontmp__182466)) break L3;
							F.line = 207;
							i_182020 = i_182467;
							F.line = 208;
							if (result_182000.kids != null) { result_182000.kids.push(news_181999.kids[chckIndx(i_182020, 0, news_181999.kids.length+0-1)-0]); } else { result_182000.kids = [news_181999.kids[chckIndx(i_182020, 0, news_181999.kids.length+0-1)-0]]; };
							F.line = 3059;
							i_182467 = addInt(i_182467, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_182000;

}

function build_toc_182041(orig_182043, types_182045, procs_182046) {
	var result_182047 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_182061 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_182214 = null;
			F.line = 3773;
			var i_182455 = 0;
			F.line = 3774;
			var l_182456 = (types_182045 != null ? types_182045.length : 0);
			L2: do {
				F.line = 3775;
					L3: while (true) {
					if (!(i_182455 < l_182456)) break L3;
						F.line = 212;
						t_182214 = types_182045[chckIndx(i_182455, 0, types_182045.length+0-1)-0];
						F.line = 213;
						var c_182228 = {heading: t_182214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_182214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_182235 = null;
							F.line = 3773;
							var i_182452 = 0;
							F.line = 3774;
							var l_182453 = (procs_182046 != null ? procs_182046.length : 0);
							L5: do {
								F.line = 3775;
									L6: while (true) {
									if (!(i_182452 < l_182453)) break L6;
										F.line = 215;
										p_182235 = procs_182046[chckIndx(i_182452, 0, procs_182046.length+0-1)-0];
										if (!(p_182235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_182236 = p_182235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_182236 != null ? xx_182236.length : 0) == 1) && (xx_182236[chckIndx(0, 0, xx_182236.length+0-1)-0].textContent == t_182214.textContent))) {
										F.line = 220;
										var q_182244 = tree_181020(makeNimstrLit("A"), [text_181122(p_182235.title)]);
										F.line = 221;
										q_182244.setAttribute("href", p_182235.getAttribute("href"));
										F.line = 222;
										if (c_182228.kids != null) { c_182228.kids.push({heading: q_182244, kids: [], sortId: 0, doSort: false}); } else { c_182228.kids = [{heading: q_182244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_182235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 3777;
										i_182452 = addInt(i_182452, 1);
										if (!(((procs_182046 != null ? procs_182046.length : 0) == l_182453))) {
										F.line = 3778;
										failed_assert_impl_58275(makeNimstrLit("c:\\Users\\gt\\Desktop\\dl\\programming\\nimdevel\\lib\\system.nim(3778, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_182061.kids != null) { new_stuff_182061.kids.push(c_182228); } else { new_stuff_182061.kids = [c_182228]; };
						F.line = 3777;
						i_182455 = addInt(i_182455, 1);
						if (!(((types_182045 != null ? types_182045.length : 0) == l_182456))) {
						F.line = 3778;
						failed_assert_impl_58275(makeNimstrLit("c:\\Users\\gt\\Desktop\\dl\\programming\\nimdevel\\lib\\system.nim(3778, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_182047 = merge_tocs_181996(orig_182043, new_stuff_182061);
	framePtr = F.prev;

	return result_182047;

}

function add_181070(parent_181072, kid_181073) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_181072.nodeName == "TR")) Tmp1 = false; else {				if ((kid_181073.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_181073.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_181074 = document.createElement("TD");
		F.line = 19;
		k_181074.appendChild(kid_181073);
		F.line = 20;
		parent_181072.appendChild(k_181074);
		}
		else {
			F.line = 22;
		parent_181072.appendChild(kid_181073);
		}
		
	framePtr = F.prev;

	
}

function set_class_181088(e_181090, value_181091) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_181090.setAttribute("class", toJSStr(value_181091));
	framePtr = F.prev;

	
}

function to_html_181375(x_181377, is_root_181378) {
			var Tmp1;

		function HEX3Aanonymous_181418(a_181420, b_181421) {
					var Tmp1;

			var result_181422 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_181420.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_181421.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_181439 = a_181420.heading.textContent;
				F.line = 107;
				var y_181440 = b_181421.heading.textContent;
				if ((x_181439 < y_181440)) {
				F.line = 108;
				result_181422 = -1;
				break BeforeRet;
				}
				
				if ((y_181440 < x_181439)) {
				F.line = 109;
				result_181422 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_181422 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_181422 = subInt(a_181420.sortId, b_181421.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_181422;

		}

	var result_181379 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_181377 == null)) {
		F.line = 91;
		result_181379 = null;
		break BeforeRet;
		}
		
		if (((x_181377.kids != null ? x_181377.kids.length : 0) == 0)) {
		if ((x_181377.heading == null)) {
		F.line = 93;
		result_181379 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_181379 = x_181377.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_181379 = tree_181020(makeNimstrLit("DIV"), []);
			if (!!((x_181377.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_181377.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_181070(result_181379, x_181377.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_181415 = tree_181020(makeNimstrLit("UL"), []);
		if (is_root_181378) {
		F.line = 100;
		set_class_181088(ul_181415, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_181088(ul_181415, makeNimstrLit("simple"));
		}
		
		if (x_181377.doSort) {
		F.line = 104;
		x_181377.kids.sort(HEX3Aanonymous_181418);
		}
		
		L2: do {
			F.line = 115;
			var k_181614 = null;
			F.line = 3771;
			var colontmp__182479 = null;
			F.line = 115;
			colontmp__182479 = x_181377.kids;
			F.line = 3773;
			var i_182481 = 0;
			F.line = 3774;
			var l_182482 = (colontmp__182479 != null ? colontmp__182479.length : 0);
			L3: do {
				F.line = 3775;
					L4: while (true) {
					if (!(i_182481 < l_182482)) break L4;
						F.line = 115;
						k_181614 = colontmp__182479[chckIndx(i_182481, 0, colontmp__182479.length+0-1)-0];
						F.line = 116;
						var y_181615 = to_html_181375(k_181614, false);
						if (!((y_181615 == null))) {
						F.line = 118;
						add_181070(ul_181415, tree_181020(makeNimstrLit("LI"), [y_181615]));
						}
						
						F.line = 3777;
						i_182481 = addInt(i_182481, 1);
						if (!(((colontmp__182479 != null ? colontmp__182479.length : 0) == l_182482))) {
						F.line = 3778;
						failed_assert_impl_58275(makeNimstrLit("c:\\Users\\gt\\Desktop\\dl\\programming\\nimdevel\\lib\\system.nim(3778, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_181415.childNodes.length == 0))) {
		F.line = 119;
		add_181070(result_181379, ul_181415);
		}
		
		if ((result_181379.childNodes.length == 0)) {
		F.line = 120;
		result_181379 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_181379;

}

function replace_by_id_181142(id_181144, new_tree_181145) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_181146 = document.getElementById(id_181144);
		F.line = 33;
		x_181146.parentNode.replaceChild(new_tree_181145, x_181146);
		F.line = 34;
		new_tree_181145.id = id_181144;
	framePtr = F.prev;

	
}

function togglevis_182299(d_182301) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_182301.style.display == 'none')
      d_182301.style.display = 'inline';
    else
      d_182301.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_182317) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_182318 = document.getElementById("toc-list");
		if ((alternative_182285[0] == null)) {
		F.line = 240;
		var tt_182337 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_181673(toc_182318, tt_182337);
		F.line = 242;
		tt_182337 = tt_182337.kids[chckIndx(0, 0, tt_182337.kids.length+0-1)-0];
		F.line = 244;
		var types_182352 = [[]];
		F.line = 245;
		var procs_182367 = [[]];
		F.line = 247;
		extract_items_181307(tt_182337, "Types", types_182352, 0);
		F.line = 248;
		extract_items_181307(tt_182337, "Procs", procs_182367, 0);
		F.line = 249;
		extract_items_181307(tt_182337, "Converters", procs_182367, 0);
		F.line = 250;
		extract_items_181307(tt_182337, "Methods", procs_182367, 0);
		F.line = 251;
		extract_items_181307(tt_182337, "Templates", procs_182367, 0);
		F.line = 252;
		extract_items_181307(tt_182337, "Macros", procs_182367, 0);
		F.line = 253;
		extract_items_181307(tt_182337, "Iterators", procs_182367, 0);
		F.line = 255;
		var ntoc_182375 = build_toc_182041(tt_182337, types_182352[0], procs_182367[0]);
		F.line = 256;
		var x_182376 = to_html_181375(ntoc_182375, true);
		F.line = 257;
		alternative_182285[0] = tree_181020(makeNimstrLit("DIV"), [x_182376]);
		}
		
		if ((value_182317 == "type")) {
		F.line = 259;
		replace_by_id_181142("tocRoot", alternative_182285[0]);
		}
		else {
			F.line = 261;
		replace_by_id_181142("tocRoot", tree_181020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_182299(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_182485 = [null];
var contents_182487 = [null];
var oldtoc_182742 = [null];
var timer_182743 = [null];

function raiseRangeError() {
		var e_54302 = null;
		e_54302 = {m_type: NTI41262, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_54302.message = nimCopy(null, makeNimstrLit("value out of range"), NTI37040);
		e_54302.parent = null;
		raiseException(e_54302, "RangeError");

	
}

function nsuToLowerAsciiChar(c_171980) {
	var result_171981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"..\\..\\lib\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_171980] != undefined)) {
		F.line = 222;
		result_171981 = chckRange(addInt(c_171980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_171981 = c_171980;
		}
		
	framePtr = F.prev;

	return result_171981;

}

function fuzzy_match_180070(pattern_180072, str_180073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_180077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_180078 = -100;
		F.line = 38;
		var header_matched_180079 = false;
		F.line = 39;
		var unmatched_leading_char_count_180081 = 0;
		F.line = 40;
		var consecutive_match_count_180083 = 0;
		F.line = 41;
		var str_index_180085 = 0;
		F.line = 42;
		var pat_index_180087 = 0;
		F.line = 43;
		var score_180089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_180085 < (str_180073 != null ? str_180073.length : 0)) && (pat_index_180087 < (pattern_180072 != null ? pattern_180072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_180096 = nsuToLowerAsciiChar(pattern_180072.charCodeAt(chckIndx(pat_index_180087, 0, pattern_180072.length+0-1)-0));
						F.line = 52;
						var str_char_180097 = nsuToLowerAsciiChar(str_180073.charCodeAt(chckIndx(str_index_180085, 0, str_180073.length+0-1)-0));
						if ((ConstSet3[pattern_char_180096] != undefined)) {
						F.line = 56;
						pat_index_180087 = addInt(pat_index_180087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_180097] != undefined)) {
						F.line = 59;
						str_index_180085 = addInt(str_index_180085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_180079) && (str_char_180097 == 58))) {
						F.line = 65;
						header_matched_180079 = true;
						F.line = 66;
						score_state_180078 = -100;
						F.line = 67;
						score_180089 = Math.trunc(Math.floor((5.0000000000000000e-001 * score_180089)));
						F.line = 68;
						pat_index_180087 = 0;
						F.line = 69;
						str_index_180085 = addInt(str_index_180085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_180097 == pattern_char_180096)) {
						F.line = 73;
						switch (score_state_180078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_180078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_180078 = 5;
							F.line = 78;
							score_180089 = addInt(score_180089, score_state_180078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_180083 = addInt(consecutive_match_count_180083, 1);
							F.line = 82;
							score_state_180078 = 5;
							F.line = 83;
							score_180089 = addInt(score_180089, mulInt(5, consecutive_match_count_180083));
							if ((score_state_180078 == 10)) {
							F.line = 86;
							score_180089 = addInt(score_180089, 10);
							}
							
							F.line = 88;
							var on_boundary_180172 = (pat_index_180087 == (pattern_180072 != null ? (pattern_180072.length-1) : -1));
							if ((!(on_boundary_180172) && (str_index_180085 < (str_180073 != null ? (str_180073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_180173 = nsuToLowerAsciiChar(pattern_180072.charCodeAt(chckIndx(addInt(pat_index_180087, 1), 0, pattern_180072.length+0-1)-0));
							F.line = 92;
							var next_str_char_180174 = nsuToLowerAsciiChar(str_180073.charCodeAt(chckIndx(addInt(str_index_180085, 1), 0, str_180073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_180174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_180174 == next_pattern_char_180173));							}							on_boundary_180172 = Tmp4;
							}
							
							if (on_boundary_180172) {
							F.line = 100;
							score_state_180078 = 20;
							F.line = 100;
							score_180089 = addInt(score_180089, score_state_180078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_180073.charCodeAt(chckIndx(subInt(str_index_180085, 1), 0, str_180073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_180073.charCodeAt(chckIndx(subInt(str_index_180085, 1), 0, str_180073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_180073.charCodeAt(chckIndx(str_index_180085, 0, str_180073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_180212 = Tmp5;
							if (is_leading_char_180212) {
							F.line = 110;
							score_state_180078 = 10;
							}
							else {
								F.line = 114;
								score_state_180078 = 0;
								F.line = 114;
								score_180089 = addInt(score_180089, score_state_180078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_180087 = addInt(pat_index_180087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_180078) {
							case -100:
								F.line = 120;
								score_state_180078 = -3;
								F.line = 120;
								score_180089 = addInt(score_180089, score_state_180078);
								break;
							case 5:
								F.line = 123;
								score_state_180078 = -1;
								F.line = 123;
								score_180089 = addInt(score_180089, score_state_180078);
								F.line = 124;
								consecutive_match_count_180083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_180081 < 3)) {
								F.line = 128;
								score_state_180078 = -3;
								F.line = 128;
								score_180089 = addInt(score_180089, score_state_180078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_180081 = addInt(unmatched_leading_char_count_180081, 1);
								break;
							default: 
								F.line = 132;
								score_state_180078 = -1;
								F.line = 132;
								score_180089 = addInt(score_180089, score_state_180078);
								break;
							}
						}
						
						F.line = 134;
						str_index_180085 = addInt(str_index_180085, 1);
					} while(false);
				}
		} while(false);
		F.line = 136;
		nimCopy(result_180077, {Field0: nimMax(0, score_180089), Field1: (0 < score_180089)}, NTI180074);
	framePtr = F.prev;

	return result_180077;

}

function text_181105(s_181107) {
	var result_181108 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_181108 = document.createTextNode(toJSStr(s_181107));
	framePtr = F.prev;

	return result_181108;

}

function dosearch_182504(value_182506) {

		function HEX3Aanonymous_182670(a_182679, b_182680) {
			var result_182684 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_182684 = subInt(b_182680["Field1"], a_182679["Field1"]);
			framePtr = F.prev;

			return result_182684;

		}

	var result_182507 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_182485[0] != null ? db_182485[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_182513 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_182513 = doc.documentElement;
    
		F.line = 286;
		db_182485[0] = nimCopy(null, stuff_182513.getElementsByClassName("reference"), NTI73045);
		F.line = 287;
		contents_182487[0] = nimCopy(null, [], NTI182526);
		L1: do {
			F.line = 288;
			var ahref_182614 = null;
			F.line = 3773;
			var i_182811 = 0;
			F.line = 3774;
			var l_182812 = (db_182485[0] != null ? db_182485[0].length : 0);
			L2: do {
				F.line = 3775;
					L3: while (true) {
					if (!(i_182811 < l_182812)) break L3;
						F.line = 288;
						ahref_182614 = db_182485[0][chckIndx(i_182811, 0, db_182485[0].length+0-1)-0];
						F.line = 289;
						if (contents_182487[0] != null) { contents_182487[0].push(ahref_182614.getAttribute("data-doc-search-tag")); } else { contents_182487[0] = [ahref_182614.getAttribute("data-doc-search-tag")]; };
						F.line = 3777;
						i_182811 = addInt(i_182811, 1);
						if (!(((db_182485[0] != null ? db_182485[0].length : 0) == l_182812))) {
						F.line = 3778;
						failed_assert_impl_58275(makeNimstrLit("c:\\Users\\gt\\Desktop\\dl\\programming\\nimdevel\\lib\\system.nim(3778, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_182625 = tree_181020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_182507 = tree_181020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_181088(result_182507, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_182644 = [];
		L4: do {
			F.line = 294;
			var i_182656 = 0;
			F.line = 3055;
			var colontmp__182818 = 0;
			F.line = 294;
			colontmp__182818 = (db_182485[0] != null ? db_182485[0].length : 0);
			F.line = 3056;
			var i_182819 = 0;
			L5: do {
				F.line = 3057;
					L6: while (true) {
					if (!(i_182819 < colontmp__182818)) break L6;
						F.line = 294;
						i_182656 = i_182819;
						L7: do {
							F.line = 295;
							var c_182657 = contents_182487[0][chckIndx(i_182656, 0, contents_182487[0].length+0-1)-0];
							if (((c_182657 == "Examples") || (c_182657 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__182828 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_182658 = 0;
							F.line = 301;
							var matched_182659 = false;
							F.line = 301;
							nimCopy(colontmp__182828, fuzzy_match_180070(value_182506, c_182657), NTI180074);
							F.line = 301;
							score_182658 = colontmp__182828["Field0"];
							F.line = 301;
							matched_182659 = colontmp__182828["Field1"];
							if (matched_182659) {
							F.line = 303;
							if (matches_182644 != null) { matches_182644.push({Field0: db_182485[0][chckIndx(i_182656, 0, db_182485[0].length+0-1)-0], Field1: score_182658}); } else { matches_182644 = [{Field0: db_182485[0][chckIndx(i_182656, 0, db_182485[0].length+0-1)-0], Field1: score_182658}]; };
							}
							
						} while(false);
						F.line = 3059;
						i_182819 = addInt(i_182819, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_182644.sort(HEX3Aanonymous_182670);
		L8: do {
			F.line = 306;
			var i_182722 = 0;
			F.line = 3055;
			var colontmp__182824 = 0;
			F.line = 306;
			colontmp__182824 = nimMin((matches_182644 != null ? matches_182644.length : 0), 19);
			F.line = 3056;
			var i_182825 = 0;
			L9: do {
				F.line = 3057;
					L10: while (true) {
					if (!(i_182825 < colontmp__182824)) break L10;
						F.line = 306;
						i_182722 = i_182825;
						F.line = 307;
						matches_182644[chckIndx(i_182722, 0, matches_182644.length+0-1)-0]["Field0"].innerHTML = matches_182644[chckIndx(i_182722, 0, matches_182644.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_181070(ul_182625, tree_181020(makeNimstrLit("LI"), [matches_182644[chckIndx(i_182722, 0, matches_182644.length+0-1)-0]["Field0"]]));
						F.line = 3059;
						i_182825 = addInt(i_182825, 1);
					}
			} while(false);
		} while(false);
		if ((ul_182625.childNodes.length == 0)) {
		F.line = 310;
		add_181070(result_182507, tree_181020(makeNimstrLit("B"), [text_181105(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_181070(result_182507, tree_181020(makeNimstrLit("B"), [text_181105(makeNimstrLit("search results"))]));
			F.line = 313;
			add_181070(result_182507, ul_182625);
		}
		
	framePtr = F.prev;

	return result_182507;

}

function search() {

		function wrapper_182759() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_182761 = document.getElementById("searchInput");
				F.line = 321;
				var value_182762 = elem_182761.value;
				if (!(((value_182762 != null ? value_182762.length : 0) == 0))) {
				if ((oldtoc_182742[0] == null)) {
				F.line = 324;
				oldtoc_182742[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_182768 = dosearch_182504(value_182762);
				F.line = 326;
				replace_by_id_181142("tocRoot", results_182768);
				}
				else {
				if (!((oldtoc_182742[0] == null))) {
				F.line = 328;
				replace_by_id_181142("tocRoot", oldtoc_182742[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_182743[0] == null))) {
		F.line = 330;
		clearTimeout(timer_182743[0]);
		}
		
		F.line = 331;
		timer_182743[0] = setTimeout(wrapper_182759, 400);
	framePtr = F.prev;

	
}
