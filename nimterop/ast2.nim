import macros, os, strutils, tables, times

import compiler/[ast, idents, options, renderer]

import "."/treesitter/api

import "."/[compat, globals, getters]

proc addConst(nimState: NimState, node: TSNode) =
  echo "Const: " & nimState.getNodeVal(node)
  if node.len() >= 2:
    let
      constDef = newNode(nkConstDef)
      (name, info) = nimState.getNameInfo(node.getAtom(), nskConst)
      ident = nimState.getIdent(name, info)
      val = nimState.getNodeVal(node[1]).getLit()
    if val.kind != nkNilLit:
      constDef.add ident
      constDef.add newNode(nkEmpty)
      constDef.add val

      nimState.constSection.add constDef

proc addType(nimState: NimState, node: TSNode) =
  echo "Type: " & nimState.getNodeVal(node)

proc addEnum(nimState: NimState, node: TSNode) =
  echo "Enum: " & nimState.getNodeVal(node)

proc addProc(nimState: NimState, node: TSNode) =
  echo "Proc: " & nimState.getNodeVal(node)

proc processNode(nimState: NimState, node: TSNode): bool =
  result = true

  case node.getName()
  of "preproc_def":
    nimState.addConst(node)
  of "type_definition":
    if node.inTree("struct_specifier"):
      nimState.addType(node)
    elif node.inTree("enum_specifier"):
      nimState.addEnum(node)
    else:
      # Unknown type
      result = false
  of "struct_specifier":
    nimState.addType(node)
  of "enum_specifier":
    nimState.addEnum(node)
  of "declaration":
    nimState.addProc(node)
  else:
    # Unknown
    result = false

proc searchTree(nimState: NimState, root: TSNode) =
  # Search AST generated by tree-sitter for recognized elements
  var
    node = root
    nextnode: TSNode
    depth = 0
    processed = false

  while true:
    if not node.tsNodeIsNull() and depth > -1:
      processed = nimState.processNode(node)
    else:
      break

    if not processed and node.len() != 0:
      nextnode = node[0]
      depth += 1
    else:
      nextnode = node.tsNodeNextNamedSibling()

    if nextnode.tsNodeIsNull():
      while true:
        node = node.tsNodeParent()
        depth -= 1
        if depth == -1:
          break
        if node == root:
          break
        if not node.tsNodeNextNamedSibling().tsNodeIsNull():
          node = node.tsNodeNextNamedSibling()
          break
    else:
      node = nextnode

    if node == root:
      break

proc printNimHeader*() =
  echo """# Generated at $1
# Command line:
#   $2 $3

{.hint[ConvFromXtoItselfNotNeeded]: off.}

import nimterop/types
""" % [$now(), getAppFilename(), commandLineParams().join(" ")]

proc printNim*(gState: State, fullpath: string, root: TSNode) =
  var
    nimState = new(NimState)
    fp = fullpath.replace("\\", "/")

  nimState.identifiers = newTable[string, string]()

  nimState.gState = gState
  nimState.currentHeader = getCurrentHeader(fullpath)
  nimState.sourceFile = fullpath

  # Nim compiler objects
  nimState.identCache = newIdentCache()
  nimState.config = newConfigRef()

  nimState.constSection = newNode(nkConstSection)
  nimState.enumSection = newNode(nkStmtList)
  nimState.procSection = newNode(nkStmtList)
  nimState.typeSection = newNode(nkTypeSection)

  nimState.searchTree(root)

  var
    tree = newNode(nkStmtList)
  tree.add nimState.enumSection
  tree.add nimState.constSection
  tree.add nimState.typeSection
  tree.add nimState.procSection

  echo tree.renderTree()
